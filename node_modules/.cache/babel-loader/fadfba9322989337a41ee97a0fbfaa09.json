{"ast":null,"code":"export class ApiService {\n  constructor(axios) {\n    this._axios = axios;\n\n    this._axios.interceptors.request.use(async cfg => {\n      const token = sessionStorage.getItem(\"token\");\n\n      if (token) {\n        cfg.headers[\"Authorization\"] = \"Bearer \" + token;\n      }\n\n      return { ...cfg,\n        withCredentials: true,\n        headers: {\n          \"X-Accept-Cookie\": true,\n          jtw: \"sdasdasd\",\n          ...cfg.headers\n        }\n      };\n    });\n  }\n\n  async getToken(username, password) {\n    const resp = await this._axios.post(\"/api/login/getToken\", {\n      username: username,\n      password: password\n    }, {\n      validateStatus: status => status === 200 || status === 400\n    });\n    sessionStorage.setItem(\"token\", resp.data);\n  }\n\n}","map":{"version":3,"sources":["D:/react/src/services/api/apiService.js"],"names":["ApiService","constructor","axios","_axios","interceptors","request","use","cfg","token","sessionStorage","getItem","headers","withCredentials","jtw","getToken","username","password","resp","post","validateStatus","status","setItem","data"],"mappings":"AAAA,OAAO,MAAMA,UAAN,CAAiB;AACtBC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,SAAKC,MAAL,GAAcD,KAAd;;AACA,SAAKC,MAAL,CAAYC,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CAAqC,MAAOC,GAAP,IAAe;AAClD,YAAMC,KAAK,GAAGC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAd;;AACA,UAAIF,KAAJ,EAAW;AACTD,QAAAA,GAAG,CAACI,OAAJ,CAAY,eAAZ,IAA+B,YAAYH,KAA3C;AACD;;AACD,aAAO,EACL,GAAGD,GADE;AAELK,QAAAA,eAAe,EAAE,IAFZ;AAGLD,QAAAA,OAAO,EAAE;AACP,6BAAmB,IADZ;AAEPE,UAAAA,GAAG,EAAE,UAFE;AAGP,aAAGN,GAAG,CAACI;AAHA;AAHJ,OAAP;AASD,KAdD;AAeD;;AAEa,QAARG,QAAQ,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACjC,UAAMC,IAAI,GAAG,MAAM,KAAKd,MAAL,CAAYe,IAAZ,CACjB,qBADiB,EAEjB;AACEH,MAAAA,QAAQ,EAAEA,QADZ;AAEEC,MAAAA,QAAQ,EAAEA;AAFZ,KAFiB,EAMjB;AACEG,MAAAA,cAAc,EAAGC,MAAD,IAAYA,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK;AAD3D,KANiB,CAAnB;AAUAX,IAAAA,cAAc,CAACY,OAAf,CAAuB,OAAvB,EAAgCJ,IAAI,CAACK,IAArC;AACD;;AAhCqB","sourcesContent":["export class ApiService {\r\n  constructor(axios) {\r\n    this._axios = axios;\r\n    this._axios.interceptors.request.use(async (cfg) => {\r\n      const token = sessionStorage.getItem(\"token\");\r\n      if (token) {\r\n        cfg.headers[\"Authorization\"] = \"Bearer \" + token;\r\n      }\r\n      return {\r\n        ...cfg,\r\n        withCredentials: true,\r\n        headers: {\r\n          \"X-Accept-Cookie\": true,\r\n          jtw: \"sdasdasd\",\r\n          ...cfg.headers,\r\n        },\r\n      };\r\n    });\r\n  }\r\n\r\n  async getToken(username, password) {\r\n    const resp = await this._axios.post(\r\n      \"/api/login/getToken\",\r\n      {\r\n        username: username,\r\n        password: password,\r\n      },\r\n      {\r\n        validateStatus: (status) => status === 200 || status === 400,\r\n      }\r\n    );    \r\n    sessionStorage.setItem(\"token\", resp.data)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}